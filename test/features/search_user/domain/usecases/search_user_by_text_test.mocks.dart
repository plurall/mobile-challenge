// Mocks generated by Mockito 5.0.8 from annotations
// in mobile_challenge/test/features/search_user/domain/usecases/search_user_by_text_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mobile_challenge/core/error/failures.dart' as _i5;
import 'package:mobile_challenge/features/search_user/domain/entities/user_entity.dart'
    as _i6;
import 'package:mobile_challenge/features/search_user/domain/repositories/search_user_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ISearchUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISearchUserRepository extends _i1.Mock
    implements _i3.ISearchUserRepository {
  MockISearchUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.UserEntity>>> getUsers(
          String? text) =>
      (super.noSuchMethod(Invocation.method(#getUsers, [text]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.UserEntity>>>.value(
                      _FakeEither<_i5.Failure, List<_i6.UserEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.UserEntity>>>);
}
